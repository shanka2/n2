#!/usr/bin/env node

/**
 * Module dependencies.
 */

process.on('uncaughtException', function(err) {
  console.log('Caught exception: ' + err);
});


var app = require('../app');
var debug = require('debug')('n2:server');
var http = require('http');
var async = require('async');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


async.waterfall([

    /*
    function(callback) {
    
        var MongoClient = require('mongodb').MongoClient;
        var ObjectId = require('mongodb').ObjectId;
        var url = 'mongodb://localhost:27017/mall';
        MongoClient.connect(url, function (err, db) {
            if (err) throw err;
            console.log("db is connected");

            app.locals.db = db;
            app.locals.ObjectId = ObjectId;
            callback(null);
        });
        
    },
    */
    function(callback) {
    
        var mysql = require('mysql');
        var connection = mysql.createConnection({
            host: 'localhost',
            user: 'root',
            database: '_mall'
        });

        connection.connect(function (err) {
            if (err) {
                console.error('error connecting: ' + err.stack);
                return;
            }
            console.log('connected as id ' + connection.threadId);

            app.locals.connection = connection; 
            callback(null, 'done');
        });
        
    }
    
], function (err, result) {

    server.listen(port, () => console.log('server is running'));
    
});


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
